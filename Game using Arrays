GAME EXPLAINED:
There is a square of 2x2, you need to find it from 36 spaces. If you miss then you lose a life, if you hit it you stay with the same life points.
Source Code:
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#define ROW 6
#define COL 6


int findindices(int searchfor, int *row, int *col, int m[ROW][COL]) {
   int i, j;
   for(i = 0; i < ROW; i++){
       for(j = 0; j < COL; j++){
           if (m[i][j]== searchfor) {
                *row = i;
               *col = j;
               return 1;
           }
       }
   }
   return 0;
}

void printgame(int m[ROW][COL]) {
   int i, j;
   for(i = 0; i < ROW; i++){
       for(j = 0; j < COL; j++){
           printf("%5d", m[i][j]);
       }
       printf("\n");
   }
}

int main()
{
int j;
int i;
int squares[ROW][COL]={
{0,0,0,0,0,0},
{0,0,0,0,0,0},
{0,4,4,0,0,0},
{0,4,4,0,0,0},
{0,0,0,0,0,0},
{0,0,0,0,0,0},
};
int doors[ROW][COL]={
{1,2,3,4,5,6},
{7,8,9,10,11,12},
{13,14,15,16,17,18},
{19,20,21,22,23,24},
{25,26,27,28,29,30},
{31,32,33,34,35,36}
};

int row,col,door;
float tries = 10;
int lives;
lives = tries;
float missing = 4;
printf("Cheat:\n");
printgame(squares);
printf("\n");
       printf("The square is 2x2.\nHitting a 0 loses you a life, hitting a 4 doesn't make you lose a life.\nHere are the doors to choose from:\nYou start with 10 Lives!\n\n");
       printgame(doors);
       for (float z=0; z<tries; z) {
       printf("Pick a door 1-36: ");
       scanf("%d", &door);
       findindices(door, &row, &col, doors);
       if (squares[row][col]==4){
           missing = missing - 1;
        printf("You found one piece of the square! There is %.0f missing left!\nRemaining lives: %.0f\n\n",missing,tries);
        if (missing == 0){
        printf("You won!\n\n");
        break;
       }
       else {}}
        else if (squares[row][col]==0) {
            tries = tries -1;
           printf("You lost a life!\nRemaining lives: %.0f\n\n",tries);
    if (tries==0){printf("You Ran Out of Lives!\nGame Over!\n\n");}
    else  {}
        }

       }
       return 0;
    }
